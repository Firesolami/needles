// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  ORIGINAL
  REPOST
  QUOTE
  REPLY
}
enum PostStatus {
  DRAFT
  PUBLISHED
}
enum OtpType {
  VERIFICATION
  PASSWORD_RESET
}

model User {
  id          String    @id @default(uuid()) // UUID as primary key
  profile_pic_link      String?
  profile_pic_public_id String?
  display_name   String?
  username    String    @unique
  bio         String?
  email       String    @unique
  password    String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  isVerified  Boolean   @default(false)
  password_changed_at DateTime? // Nullable field for password change timestamp
  username_changed_at DateTime? // Nullable field for username change timestamp
  posts       Post[]    // One-to-Many with Post
  likes       Like[]    // One-to-Many with Like
  dislikes    Dislike[] // One-to-Many with Dislike
  followers   Follower[] @relation("Following") // Many-to-Many with User (self-referencing)
  following   Follower[] @relation("Follower") // Many-to-Many with User (self-referencing)
  otps        Otp[]     // One-to-Many with Otp
  bookmarks   Bookmark[] // One-to-Many with Bookmark
}

model Post {
  id          String    @id @default(uuid())
  body        String?
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade) // Foreign key with cascading delete
  status      PostStatus    @default(DRAFT)
  media_links  String[]   // Array of media links
  type        PostType @default(ORIGINAL) // Enum for post type
  parent_id   String?   // Nullable foreign key for replies or quotes
  parent      Post?     @relation("ParentPost", fields: [parent_id], references: [id], onDelete: Cascade) // Self-referencing relation for replies/quotes
  children    Post[]    @relation("ParentPost") // Self-referencing relation for replies/quotes    
  bookmarks   Bookmark[] // One-to-Many with Bookmark
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  likes       Like[]    // One-to-Many with Like
  likes_count Int      @default(0) // Count of likes
  dislikes    Dislike[] // One-to-Many with Dislike
  dislikes_count Int   @default(0) // Count of dislikes
  comments_count Int @default(0) // Count of comments
  reposts_count Int @default(0) // Count of reposts
  quotes_count Int @default(0) // Count of quotes
  bookmarks_count Int @default(0) // Count of bookmarks
}

model Bookmark {
  id          String    @id @default(uuid())
  post_id     String
  user_id     String
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  @@unique([post_id, user_id]) // Composite unique constraint
}

model Like {
  id          String    @id @default(uuid())
  post_id     String
  user_id     String
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  @@unique([post_id, user_id]) // Composite unique constraint
}

model Dislike {
  id          String    @id @default(uuid())
  post_id     String
  user_id     String
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  @@unique([post_id, user_id]) // Composite unique constraint
}

model Follower {
  follower_id   String
  following_id  String
  created_at    DateTime  @default(now())
  follower      User      @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following     User      @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)
  @@id([follower_id, following_id]) // Composite primary key
  @@unique([follower_id, following_id]) // Ensures no duplicate follower-following pairs
}

model Otp {
  id          String    @id @default(uuid())
  otp         String
  type        OtpType    
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expiry_time DateTime
  created_at  DateTime  @default(now())
}